// Задача 3. Сортировка подсчётом
// Известно, что массив, который необходимо отсортировать, 
// состоит из целых чисел не меньше 10 и не больше 24.

#include <iostream>

void print_array(int* arr, int s) {
    std::cout << "Отсортированный массив: ";
    for (int i = 0; i < s; i++)
        std::cout << arr[i] << " ";
    std::cout << std::endl;
}

void count_sort(int* arr, int size) {
    
    int counts[25] = {0};//Создадим массив размера 25, в котором будем хранить на k-ом месте, сколько раз число k встретилось в этом массиве.
    for (int i = 0; i < size; i++)
        counts[arr[i]]++; //Пройдемся по всем числам исходного массива и увеличим соответствующее значение массива на 1
    //После того, как мы посчитали, сколько раз каждое число встретилось, можно просто пройтись по этому массиву и вывести 1 столько раз, 
    // сколько встретилась 1, вывести 2 столько раз, сколько встретилась 2, и так далее.
    int c = 0;
    for (int i = 0; i < 25; i++) {
        while (counts[i] != 0) 
        {            
            arr[c] = i;
            c++;
            counts[i]--;
        }
    }
}

int main()
{
    setlocale(LC_ALL, "rus");
    int array1[] = { 19, 14, 22, 22, 17, 22, 13, 21, 20, 24, 18, 10, 17, 16, 17, 20, 22, 11, 20, 16, 14, 13, 10, 22, 18, 14, 16, 24, 19, 17, };
    int array2[] = { 16, 17, 14, 20, 22, 20, 17, 22, 16, 19, 23, 24, 20, 22, 21, 18, 14, 16, 17, 21, 10, 11, 19, 23, 11, 11, 17, 17, 11, 21, 17, 11, 17, 16, 12, 11, 16, 22, 23, 16 };
    int array3[] = { 21, 15, 19, 18, 23, 12, 18, 18, 19, 23, 12, 20, 15, 22, 21, 18, 19, 20, 12, 16, 20, 14, 17, 13, 10, 23, 19, 14, 10, 22, 19, 12, 24, 23, 22, 15, 13, 22, 18, 18, 11, 23, 24, 17, 10 };

    int size1 = sizeof(array1) / sizeof(array1[0]);
    int size2 = sizeof(array2) / sizeof(array2[0]);
    int size3 = sizeof(array3) / sizeof(array3[0]);
    std::cout << "Исходный массив: ";
    for (int i = 0; i < size3; i++)
        std::cout << array3[i] << " ";
    std::cout << std::endl;

    count_sort(array3, size3);
    print_array(array3, size3);

    return EXIT_SUCCESS;
}

